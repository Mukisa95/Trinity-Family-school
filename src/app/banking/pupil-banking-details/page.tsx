"use client";

import React, { Suspense, useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { ModernDialog, ModernDialogContent, ModernDialogHeader, ModernDialogTitle, ModernDialogDescription } from '@/components/ui/modern-dialog';
import { useToast } from '@/hooks/use-toast';
import { ArrowLeft, Plus, Minus, Banknote, Loader2, TrendingUp, TrendingDown, Calendar, Clock, Wallet, CreditCard, History, AlertCircle, RotateCcw, X, Trash2 } from 'lucide-react';
import { format, parseISO } from 'date-fns';
import { formatCurrency } from '@/utils/format';

import { 
  useAccountByPupilId, 
  useLoansByPupilId, 
  useTransactionsByPupilId,
  useCreateAccount,
  useCreateTransaction,
  useCreateLoan,
  useRevertTransaction,
  useCancelLoan
} from '@/lib/hooks/use-banking';
import { usePupil } from '@/lib/hooks/use-pupils';
import { useActiveAcademicYear } from '@/lib/hooks/use-academic-years';
import type { Pupil, Account, Loan, Transaction } from '@/types';


interface PupilBankingClientProps {
  pupilId: string | null;
}

function PupilBankingDetailContent({ pupilId }: PupilBankingClientProps) {
  const router = useRouter();
  const { toast } = useToast();

  const [openDeposit, setOpenDeposit] = useState(false);
  const [openWithdraw, setOpenWithdraw] = useState(false);
  const [openLoan, setOpenLoan] = useState(false);
  const [openRevertTransaction, setOpenRevertTransaction] = useState(false);
  const [openCancelLoan, setOpenCancelLoan] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<any>(null);
  const [selectedLoan, setSelectedLoan] = useState<any>(null);

  const { data: pupil, isLoading: pupilLoading } = usePupil(pupilId || '');
  const { data: account, isLoading: accountLoading } = useAccountByPupilId(pupilId || '');
  const { data: loans = [] } = useLoansByPupilId(pupilId || '');
  const { data: transactions = [] } = useTransactionsByPupilId(pupilId || '');
  const { data: activeAcademicYear } = useActiveAcademicYear();
  
  const createAccountMutation = useCreateAccount();
  const createTransactionMutation = useCreateTransaction();
  const createLoanMutation = useCreateLoan();
  const revertTransactionMutation = useRevertTransaction();
  const cancelLoanMutation = useCancelLoan();

  // Get current term from active academic year
  const currentTerm = activeAcademicYear?.terms?.find(term => term.isCurrent) || activeAcademicYear?.terms?.[0];

  const handleCreateAccount = async () => {
    if (!pupil) return;

    try {
      await createAccountMutation.mutateAsync({
        pupilId: pupil.id,
        accountName: `${pupil.firstName} ${pupil.lastName}`,
        accountNumber: '', // Will be generated by the service
        balance: 0,
      });
      
      toast({
        title: "Success",
        description: "Bank account created successfully. Refresh may be needed.",
      });
      // Ideally, refetch account or update state
    } catch (error: any) {
      console.error('Error creating account:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || 'Failed to create account',
      });
    }
  };

  if (pupilLoading || !pupilId) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
        <div className="text-center space-y-4">
          <div className="relative">
            <Loader2 className="h-12 w-12 animate-spin text-blue-600 mx-auto" />
            <div className="absolute inset-0 h-12 w-12 rounded-full border-2 border-blue-200 border-t-transparent animate-spin mx-auto"></div>
          </div>
          <div className="space-y-2">
            <h3 className="text-lg font-semibold text-gray-800">Loading Banking Details</h3>
            <p className="text-sm text-gray-600">Please wait while we fetch the account information...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!pupil) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4">
        <div className="max-w-2xl mx-auto">
          <div className="text-center py-16 space-y-6">
            <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto">
              <AlertCircle className="w-10 h-10 text-red-600" />
            </div>
            <div className="space-y-3">
              <h1 className="text-3xl font-bold text-gray-900">Pupil Not Found</h1>
              <p className="text-gray-600 text-lg">The pupil ID provided could not be found in our records.</p>
            </div>
            <Button 
              onClick={() => router.push('/banking/list')} 
              className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 rounded-xl transition-all duration-200 hover:scale-105"
            >
              <ArrowLeft className="w-5 h-5 mr-2" />
            Back to Banking List
          </Button>
          </div>
        </div>
      </div>
    );
  }
  
  if (accountLoading) {
     return (
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
        <div className="text-center space-y-4">
          <div className="relative">
            <Loader2 className="h-12 w-12 animate-spin text-blue-600 mx-auto" />
            <div className="absolute inset-0 h-12 w-12 rounded-full border-2 border-blue-200 border-t-transparent animate-spin mx-auto"></div>
          </div>
          <div className="space-y-2">
            <h3 className="text-lg font-semibold text-gray-800">Loading Account Details</h3>
            <p className="text-sm text-gray-600">Fetching account information...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!account) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 p-4">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <Button 
              variant="ghost" 
              onClick={() => router.push('/banking/list')}
              className="flex items-center gap-2 text-gray-700 hover:text-gray-900 hover:bg-white/60 rounded-xl transition-all duration-200"
            >
              <ArrowLeft className="w-5 h-5" />
              Back to Banking
            </Button>
          </div>
          
          {/* No Account Card */}
          <Card className="shadow-2xl border-0 bg-white/80 backdrop-blur-sm">
            <CardContent className="p-8 text-center">
              <div className="space-y-6">
                {/* Avatar */}
                <div className="flex justify-center">
                  {pupil.photo ? (
                    <img 
                      src={pupil.photo} 
                      alt={`${pupil.firstName} ${pupil.lastName}`}
                      className="w-24 h-24 rounded-full object-cover border-4 border-blue-200 shadow-lg"
                    />
                  ) : (
                    <div className="w-24 h-24 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center text-3xl font-bold text-white shadow-lg">
                  {pupil.firstName[0]}
                    </div>
                  )}
                </div>
                
                {/* Pupil Info */}
                <div className="space-y-2">
                  <h1 className="text-3xl font-bold text-gray-900">{`${pupil.firstName} ${pupil.lastName}`}</h1>
                  <p className="text-lg text-gray-600">ID: {pupil.admissionNumber}</p>
                  {pupil.className && (
                    <Badge className="bg-blue-100 text-blue-800 text-sm px-3 py-1">
                      {pupil.className}
                    </Badge>
                  )}
                </div>
                
                {/* No Account Message */}
                <div className="bg-amber-50 border border-amber-200 rounded-xl p-6 space-y-4">
                  <div className="w-16 h-16 bg-amber-100 rounded-full flex items-center justify-center mx-auto">
                    <Wallet className="w-8 h-8 text-amber-600" />
                  </div>
                  <div className="space-y-2">
                    <h3 className="text-xl font-semibold text-amber-800">No Bank Account</h3>
                    <p className="text-amber-700">This pupil does not have a bank account yet. Create one to start managing their finances.</p>
                  </div>
                </div>
                
                {/* Create Account Button */}
                <Button 
                  onClick={handleCreateAccount} 
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-8 py-3 rounded-xl text-lg font-semibold transition-all duration-200 hover:scale-105 shadow-lg"
                >
                  <Plus className="w-5 h-5 mr-2" />
                  Create Bank Account
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  const activeLoans = loans.filter(loan => loan.status === 'ACTIVE');
  const totalOutstanding = activeLoans.reduce((total, loan) => total + (loan.amount - loan.amountRepaid), 0);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      <div className="max-w-7xl mx-auto p-4 md:p-6 lg:p-8 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <Button 
            variant="ghost" 
            onClick={() => router.push('/banking/list')}
            className="flex items-center gap-2 text-gray-700 hover:text-gray-900 hover:bg-white/60 rounded-xl transition-all duration-200"
          >
            <ArrowLeft className="w-5 h-5" />
            <span className="hidden sm:inline">Back to Banking</span>
            <span className="sm:hidden">Back</span>
          </Button>
          
          <div className="flex items-center gap-2 text-sm text-gray-600">
            <Clock className="w-4 h-4" />
            <span className="hidden sm:inline">Last updated: {account.updatedAt ? format(parseISO(account.updatedAt), 'MMM d, HH:mm') : 'Now'}</span>
            <span className="sm:hidden">Updated: {account.updatedAt ? format(parseISO(account.updatedAt), 'MMM d') : 'Now'}</span>
          </div>
        </div>

        {/* Pupil Header Card */}
        <Card className="shadow-2xl border-0 bg-white/80 backdrop-blur-sm overflow-hidden">
          <div className="bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 p-6">
            <div className="flex flex-col sm:flex-row items-start sm:items-center gap-6">
              {/* Avatar & Info */}
              <div className="flex items-center gap-4 flex-1">
                  {pupil.photo ? (
                    <img 
                      src={pupil.photo} 
                      alt={`${pupil.firstName} ${pupil.lastName}`}
                    className="w-16 h-16 sm:w-20 sm:h-20 rounded-full object-cover border-4 border-white/30 shadow-lg"
                    />
                  ) : (
                  <div className="w-16 h-16 sm:w-20 sm:h-20 rounded-full bg-white/20 flex items-center justify-center text-2xl sm:text-3xl font-bold text-white shadow-lg">
                      {pupil.firstName[0]}
                    </div>
                  )}
                
                <div className="space-y-1">
                  <div className="flex flex-col sm:flex-row sm:items-center gap-2">
                    <h2 className="text-xl sm:text-2xl font-bold text-white">
                      {`${pupil.firstName} ${pupil.lastName}`}
                      </h2>
                      {pupil.className && (
                      <Badge className="bg-white/20 text-white border-white/30 text-xs w-fit">
                          {pupil.className}
                        </Badge>
                      )}
                    </div>
                  <div className="flex flex-col sm:flex-row sm:items-center gap-2 text-sm text-white/90">
                    <span>ID: {pupil.admissionNumber}</span>
                    <span className="hidden sm:inline">•</span>
                    <span>Account: {account.accountNumber}</span>
                  </div>
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
                <Button
                  onClick={() => setOpenDeposit(true)}
                  className="bg-green-500 hover:bg-green-600 text-white border-0 rounded-full px-4 py-2 transition-all duration-200 hover:scale-105 shadow-lg"
                  size="sm"
                >
                  <Plus className="w-4 h-4 mr-2" />
                  Deposit
                </Button>
                <Button
                  onClick={() => setOpenWithdraw(true)}
                  className="bg-red-500 hover:bg-red-600 text-white border-0 rounded-full px-4 py-2 transition-all duration-200 hover:scale-105 shadow-lg"
                  size="sm"
                >
                  <Minus className="w-4 h-4 mr-2" />
                  Withdraw
                </Button>
                <Button
                  onClick={() => setOpenLoan(true)}
                  className="bg-amber-500 hover:bg-amber-600 text-white border-0 rounded-full px-4 py-2 transition-all duration-200 hover:scale-105 shadow-lg"
                  size="sm"
                >
                  <Banknote className="w-4 h-4 mr-2" />
                  <span className="hidden sm:inline">New Loan</span>
                  <span className="sm:hidden">Loan</span>
                </Button>
              </div>
            </div>
          </div>
        </Card>

        {/* Stats Cards */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-3">
          {/* Balance Card */}
          <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-200">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs font-medium text-gray-600 mb-1">Balance</p>
                  <p className="text-lg font-bold text-gray-900">{formatCurrency(account.balance)}</p>
                </div>
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <Wallet className="w-4 h-4 text-blue-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Active Loans Card */}
          <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-200">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs font-medium text-gray-600 mb-1">Loans</p>
                  <p className="text-lg font-bold text-amber-600">{activeLoans.length}</p>
                </div>
                <div className="w-8 h-8 bg-amber-100 rounded-full flex items-center justify-center">
                  <CreditCard className="w-4 h-4 text-amber-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Outstanding Amount Card */}
          <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-200">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs font-medium text-gray-600 mb-1">Outstanding</p>
                  <p className="text-lg font-bold text-red-600">{formatCurrency(totalOutstanding)}</p>
                </div>
                <div className="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                  <TrendingDown className="w-4 h-4 text-red-600" />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Total Transactions Card */}
          <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-200">
            <CardContent className="p-3">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-xs font-medium text-gray-600 mb-1">Transactions</p>
                  <p className="text-lg font-bold text-green-600">{transactions.length}</p>
                </div>
                <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                  <History className="w-4 h-4 text-green-600" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Loans Section */}
          <div className="lg:col-span-1 space-y-6">
            <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-xl font-bold text-gray-900 flex items-center gap-2">
                    <CreditCard className="w-5 h-5 text-amber-600" />
                    Active Loans
                  </CardTitle>
                  {activeLoans.length > 0 && (
                    <Badge className="bg-amber-100 text-amber-800">
                      {formatCurrency(totalOutstanding)}
                    </Badge>
                  )}
                </div>
              </CardHeader>
              <CardContent className="space-y-4">
                {activeLoans.length > 0 ? (
                  activeLoans.map(loan => (
                    <div key={loan.id} className="bg-gradient-to-r from-amber-50 to-orange-50 rounded-xl p-4 border border-amber-200 hover:shadow-lg transition-all duration-200">
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-900 mb-1">{loan.purpose || 'Loan'}</h3>
                          <div className="flex items-center gap-2 text-sm text-gray-600">
                            <Calendar className="w-4 h-4" />
                            <span>Due: {format(parseISO(loan.repaymentDate), 'MMM d, yyyy')}</span>
                          </div>
                        </div>
                        <Badge className="bg-amber-200 text-amber-800 text-xs">
                          {loan.status}
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-3 gap-3 mb-3">
                        <div className="text-center">
                          <p className="text-xs text-gray-500 mb-1">Amount</p>
                          <p className="font-semibold text-sm text-gray-900">{formatCurrency(loan.amount)}</p>
                        </div>
                        <div className="text-center">
                          <p className="text-xs text-gray-500 mb-1">Repaid</p>
                          <p className="font-semibold text-sm text-green-600">{formatCurrency(loan.amountRepaid)}</p>
                        </div>
                        <div className="text-center">
                          <p className="text-xs text-gray-500 mb-1">Due</p>
                          <p className="font-semibold text-sm text-red-600">{formatCurrency(loan.amount - loan.amountRepaid)}</p>
                        </div>
                      </div>
                      
                      {/* Progress Bar */}
                      <div className="space-y-2">
                        <div className="flex justify-between text-xs text-gray-600">
                          <span>Progress</span>
                          <span>{Math.round((loan.amountRepaid / loan.amount) * 100)}%</span>
                        </div>
                        <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
                          <div 
                            className="h-full bg-gradient-to-r from-green-500 to-emerald-500 rounded-full transition-all duration-300"
                            style={{ width: `${(loan.amountRepaid / loan.amount) * 100}%` }}
                          />
                        </div>
                      </div>
                      
                      {/* Cancel Loan Button */}
                      {loan.status === 'ACTIVE' && (
                        <div className="mt-3 pt-3 border-t border-amber-200">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              setSelectedLoan(loan);
                              setOpenCancelLoan(true);
                            }}
                            className="w-full text-xs h-8 border-red-300 hover:border-red-400 hover:text-red-600 hover:bg-red-50 transition-colors"
                          >
                            <X className="w-3 h-3 mr-1" />
                            Cancel Loan
                          </Button>
                        </div>
                      )}
                  </div>
                  ))
                ) : (
                  <div className="text-center py-8 space-y-3">
                    <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto">
                      <CreditCard className="w-8 h-8 text-gray-400" />
                    </div>
                    <div className="space-y-1">
                      <p className="text-sm font-medium text-gray-600">No Active Loans</p>
                      <p className="text-xs text-gray-500">This pupil has no active loans at the moment.</p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Transactions Section */}
          <div className="lg:col-span-2">
            <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="pb-4">
                <CardTitle className="text-xl font-bold text-gray-900 flex items-center gap-2">
                  <History className="w-5 h-5 text-blue-600" />
                  Recent Transactions
                </CardTitle>
              </CardHeader>
              <CardContent>
                {transactions.length > 0 ? (
                  <div className="space-y-3">
                    {transactions.slice(0, 10).map(tx => {
                      const isDeposit = tx.type === 'DEPOSIT';
                      return (
                        <div 
                          key={tx.id} 
                          className={`p-4 rounded-xl border transition-all duration-200 hover:shadow-lg ${
                            isDeposit 
                              ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-green-200 hover:border-green-300' 
                              : 'bg-gradient-to-r from-red-50 to-pink-50 border-red-200 hover:border-red-300'
                          }`}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                                isDeposit ? 'bg-green-100' : 'bg-red-100'
                              }`}>
                                {isDeposit ? (
                                  <TrendingUp className="w-5 h-5 text-green-600" />
                                ) : (
                                  <TrendingDown className="w-5 h-5 text-red-600" />
                                )}
                              </div>
                        <div>
                                <p className={`font-semibold ${isDeposit ? 'text-green-700' : 'text-red-700'}`}>
                                  {tx.type}
                                </p>
                                <p className="text-sm text-gray-600">{tx.description || 'No description'}</p>
                                <p className="text-xs text-gray-500 flex items-center gap-1">
                                  <Clock className="w-3 h-3" />
                                  {format(parseISO(tx.transactionDate), 'MMM d, yyyy • HH:mm')}
                                </p>
                              </div>
                            </div>
                            <div className="text-right flex flex-col items-end gap-2">
                              <p className={`text-lg font-bold ${isDeposit ? 'text-green-600' : 'text-red-600'}`}>
                                {isDeposit ? '+' : '-'}{formatCurrency(tx.amount)}
                              </p>
                              {!tx.isReverted && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    setSelectedTransaction(tx);
                                    setOpenRevertTransaction(true);
                                  }}
                                  className="text-xs h-7 px-2 border-gray-300 hover:border-red-400 hover:text-red-600 hover:bg-red-50 transition-colors"
                                >
                                  <RotateCcw className="w-3 h-3 mr-1" />
                                  Revert
                                </Button>
                              )}
                              {tx.isReverted && (
                                <Badge variant="secondary" className="text-xs">
                                  Reverted
                                </Badge>
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                ) : (
                  <div className="text-center py-12 space-y-4">
                    <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto">
                      <History className="w-10 h-10 text-gray-400" />
                    </div>
                    <div className="space-y-2">
                      <p className="text-lg font-medium text-gray-600">No Transactions</p>
                      <p className="text-sm text-gray-500">No transactions found for this pupil yet.</p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
        
        {/* Modal Dialogs for Banking Operations */}
        
        {/* Deposit Modal */}
        <ModernDialog open={openDeposit} onOpenChange={setOpenDeposit}>
          <ModernDialogContent size="md" open={openDeposit} onOpenChange={setOpenDeposit} className="sm:max-w-md">
            <ModernDialogHeader className="text-center pb-4">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Plus className="w-8 h-8 text-green-600" />
              </div>
              <ModernDialogTitle className="text-2xl font-bold text-gray-900">Make Deposit</ModernDialogTitle>
              <ModernDialogDescription className="text-gray-600">
                Add money to {pupil.firstName} {pupil.lastName}'s account
              </ModernDialogDescription>
            </ModernDialogHeader>
            <form onSubmit={async (e) => {
              e.preventDefault();
              const formData = new FormData(e.currentTarget);
              const amount = parseFloat(formData.get('amount') as string);
              const description = formData.get('description') as string;
              
              if (amount && amount > 0 && account) {
                try {
                  await createTransactionMutation.mutateAsync({
                    pupilId: pupilId!,
                    accountId: account.id,
                    type: 'DEPOSIT',
                    amount,
                    description: description || `Deposit to ${pupil.firstName}'s account`,
                    transactionDate: new Date().toISOString(),
                    processedBy: 'System',
                    academicYearId: activeAcademicYear?.id || '',
                    termId: currentTerm?.id || ''
                  });
                  
                  toast({
                    title: "Deposit Successful",
                    description: `Deposited ${formatCurrency(amount)} to ${pupil.firstName}'s account`,
                  });
                  setOpenDeposit(false);
                } catch (error: any) {
                  toast({
                    variant: "destructive",  
                    title: "Deposit Failed",
                    description: error.message || 'Failed to process deposit',
                  });
                }
              }
            }} className="space-y-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="deposit-amount" className="text-sm font-semibold text-gray-700">Amount (UGX) *</Label>
                  <Input
                    id="deposit-amount"
                    name="amount"
                    type="number"
                    min="1"
                    step="0.01"
                    placeholder="Enter deposit amount"
                    className="mt-2 text-lg h-12 rounded-xl border-2 focus:border-green-500 transition-colors"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="deposit-description" className="text-sm font-semibold text-gray-700">Description</Label>
                  <Input
                    id="deposit-description"
                    name="description"
                    placeholder="Optional description"
                    className="mt-2 h-12 rounded-xl border-2 focus:border-green-500 transition-colors"
                  />
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button type="button" variant="outline" onClick={() => setOpenDeposit(false)} className="flex-1 h-12 rounded-xl border-2">
                  Cancel
                </Button>
                <Button type="submit" className="flex-1 h-12 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white rounded-xl transition-all duration-200 hover:scale-105">
                  Make Deposit
                </Button>
              </div>
            </form>
          </ModernDialogContent>
        </ModernDialog>

        {/* Withdraw Modal */}
        <ModernDialog open={openWithdraw} onOpenChange={setOpenWithdraw}>
          <ModernDialogContent size="md" open={openWithdraw} onOpenChange={setOpenWithdraw} className="sm:max-w-md">
            <ModernDialogHeader className="text-center pb-4">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Minus className="w-8 h-8 text-red-600" />
              </div>
              <ModernDialogTitle className="text-2xl font-bold text-gray-900">Make Withdrawal</ModernDialogTitle>
              <ModernDialogDescription className="text-gray-600">
                Withdraw money from {pupil.firstName} {pupil.lastName}'s account
              </ModernDialogDescription>
            </ModernDialogHeader>
            <div className="mb-6 p-4 bg-blue-50 rounded-xl border border-blue-200">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-blue-700">Current Balance:</span>
                <span className="text-lg font-bold text-blue-900">{formatCurrency(account.balance)}</span>
              </div>
            </div>
            <form onSubmit={async (e) => {
              e.preventDefault();
              const formData = new FormData(e.currentTarget);
              const amount = parseFloat(formData.get('amount') as string);
              const description = formData.get('description') as string;
              
              if (amount && amount > 0 && account) {
                if (amount > account.balance) {
                  toast({
                    variant: "destructive",
                    title: "Insufficient Funds",
                    description: "Withdrawal amount exceeds available balance",
                  });
                  return;
                }
                
                try {
                  await createTransactionMutation.mutateAsync({
                    pupilId: pupilId!,
                    accountId: account.id,
                    type: 'WITHDRAWAL',
                    amount,
                    description: description || `Withdrawal from ${pupil.firstName}'s account`,
                    transactionDate: new Date().toISOString(),
                    processedBy: 'System',
                    academicYearId: activeAcademicYear?.id || '',
                    termId: currentTerm?.id || ''
                  });
                  
                  toast({
                    title: "Withdrawal Successful",
                    description: `Withdrew ${formatCurrency(amount)} from ${pupil.firstName}'s account`,
                  });
                  setOpenWithdraw(false);
                } catch (error: any) {
                  toast({
                    variant: "destructive",
                    title: "Withdrawal Failed",
                    description: error.message || 'Failed to process withdrawal',
                  });
                }
              }
            }} className="space-y-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="withdraw-amount" className="text-sm font-semibold text-gray-700">Amount (UGX) *</Label>
                  <Input
                    id="withdraw-amount"
                    name="amount"
                    type="number"
                    min="1"
                    max={account.balance}
                    step="0.01"
                    placeholder="Enter withdrawal amount"
                    className="mt-2 text-lg h-12 rounded-xl border-2 focus:border-red-500 transition-colors"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="withdraw-description" className="text-sm font-semibold text-gray-700">Description</Label>
                  <Input
                    id="withdraw-description"
                    name="description"
                    placeholder="Optional description"
                    className="mt-2 h-12 rounded-xl border-2 focus:border-red-500 transition-colors"
                  />
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button type="button" variant="outline" onClick={() => setOpenWithdraw(false)} className="flex-1 h-12 rounded-xl border-2">
                  Cancel
                </Button>
                <Button type="submit" className="flex-1 h-12 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white rounded-xl transition-all duration-200 hover:scale-105">
                  Make Withdrawal
                </Button>
              </div>
            </form>
          </ModernDialogContent>
        </ModernDialog>

        {/* New Loan Modal */}
        <ModernDialog open={openLoan} onOpenChange={setOpenLoan}>
          <ModernDialogContent size="md" open={openLoan} onOpenChange={setOpenLoan} className="sm:max-w-md">
            <ModernDialogHeader className="text-center pb-4">
              <div className="w-16 h-16 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Banknote className="w-8 h-8 text-amber-600" />
              </div>
              <ModernDialogTitle className="text-2xl font-bold text-gray-900">Create New Loan</ModernDialogTitle>
              <ModernDialogDescription className="text-gray-600">
                Create a new loan for {pupil.firstName} {pupil.lastName}
              </ModernDialogDescription>
            </ModernDialogHeader>
            <form onSubmit={async (e) => {
              e.preventDefault();
              const formData = new FormData(e.currentTarget);
              const amount = parseFloat(formData.get('amount') as string);
              const purpose = formData.get('purpose') as string;
              const repaymentDate = formData.get('repaymentDate') as string;
              // Interest rate functionality removed for now - can be added to Loan interface later if needed
              
              if (amount && amount > 0 && purpose && repaymentDate) {
                try {
                  await createLoanMutation.mutateAsync({
                    pupilId: pupilId!,
                    amount,
                    purpose,
                    repaymentDate,
                    academicYearId: activeAcademicYear?.id || '',
                    termId: currentTerm?.id || ''
                  });
                  
                  toast({
                    title: "Loan Created Successfully",
                    description: `Created loan of ${formatCurrency(amount)} for ${pupil.firstName}`,
                  });
                  setOpenLoan(false);
                } catch (error: any) {
                  toast({
                    variant: "destructive",
                    title: "Loan Creation Failed",
                    description: error.message || 'Failed to create loan',
                  });
                }
              }
            }} className="space-y-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="loan-amount" className="text-sm font-semibold text-gray-700">Loan Amount (UGX) *</Label>
                  <Input
                    id="loan-amount"
                    name="amount"
                    type="number"
                    min="1"
                    step="0.01"
                    placeholder="Enter loan amount"
                    className="mt-2 text-lg h-12 rounded-xl border-2 focus:border-amber-500 transition-colors"
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="loan-purpose" className="text-sm font-semibold text-gray-700">Purpose *</Label>
                  <Input
                    id="loan-purpose"
                    name="purpose"
                    placeholder="e.g., School fees, Books, Uniform"
                    className="mt-2 h-12 rounded-xl border-2 focus:border-amber-500 transition-colors"
                    required
                  />
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="loan-repayment-date" className="text-sm font-semibold text-gray-700">Repayment Date *</Label>
                    <Input
                      id="loan-repayment-date"
                      name="repaymentDate"
                      type="date"
                      className="mt-2 h-12 rounded-xl border-2 focus:border-amber-500 transition-colors"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="loan-interest-rate" className="text-sm font-semibold text-gray-700">Interest Rate (%)</Label>
                    <Input
                      id="loan-interest-rate"
                      name="interestRate"
                      type="number"
                      min="0"
                      max="100"
                      step="0.1"
                      placeholder="0"
                      className="mt-2 h-12 rounded-xl border-2 focus:border-amber-500 transition-colors"
                    />
                  </div>
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-3 pt-4">
                <Button type="button" variant="outline" onClick={() => setOpenLoan(false)} className="flex-1 h-12 rounded-xl border-2">
                  Cancel
                </Button>
                <Button type="submit" className="flex-1 h-12 bg-gradient-to-r from-amber-600 to-orange-600 hover:from-amber-700 hover:to-orange-700 text-white rounded-xl transition-all duration-200 hover:scale-105">
                  Create Loan
                </Button>
              </div>
            </form>
          </ModernDialogContent>
        </ModernDialog>

        {/* Revert Transaction Modal */}
        <ModernDialog open={openRevertTransaction} onOpenChange={setOpenRevertTransaction}>
          <ModernDialogContent size="md" open={openRevertTransaction} onOpenChange={setOpenRevertTransaction} className="sm:max-w-md">
            <ModernDialogHeader className="text-center pb-4">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <RotateCcw className="w-8 h-8 text-red-600" />
              </div>
              <ModernDialogTitle className="text-2xl font-bold text-gray-900">Revert Transaction</ModernDialogTitle>
              <ModernDialogDescription className="text-gray-600">
                Are you sure you want to revert this transaction? This action cannot be undone.
              </ModernDialogDescription>
            </ModernDialogHeader>
            
            {selectedTransaction && (
              <div className="mb-6 p-4 bg-gray-50 rounded-xl border">
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm font-medium text-gray-600">Type:</span>
                    <span className="text-sm font-semibold text-gray-900">{selectedTransaction.type}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm font-medium text-gray-600">Amount:</span>
                    <span className="text-sm font-bold text-red-600">{formatCurrency(selectedTransaction.amount)}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm font-medium text-gray-600">Date:</span>
                    <span className="text-sm text-gray-900">{format(parseISO(selectedTransaction.transactionDate), 'MMM d, yyyy • HH:mm')}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm font-medium text-gray-600">Description:</span>
                    <span className="text-sm text-gray-900">{selectedTransaction.description || 'No description'}</span>
                  </div>
                </div>
              </div>
            )}

            <div className="flex flex-col sm:flex-row gap-3 pt-4">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => {
                  setOpenRevertTransaction(false);
                  setSelectedTransaction(null);
                }} 
                className="flex-1 h-12 rounded-xl border-2"
              >
                Cancel
              </Button>
              <Button 
                onClick={async () => {
                  if (selectedTransaction) {
                    try {
                      await revertTransactionMutation.mutateAsync(selectedTransaction.id);
                      toast({
                        title: "Transaction Reverted",
                        description: `Successfully reverted ${selectedTransaction.type.toLowerCase()} of ${formatCurrency(selectedTransaction.amount)}`,
                      });
                      setOpenRevertTransaction(false);
                      setSelectedTransaction(null);
                    } catch (error: any) {
                      toast({
                        variant: "destructive",
                        title: "Revert Failed",
                        description: error.message || 'Failed to revert transaction',
                      });
                    }
                  }
                }}
                className="flex-1 h-12 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white rounded-xl transition-all duration-200 hover:scale-105"
                disabled={revertTransactionMutation.isPending}
              >
                {revertTransactionMutation.isPending ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Reverting...
                  </>
                ) : (
                  <>
                    <RotateCcw className="w-4 h-4 mr-2" />
                    Revert Transaction
                  </>
                )}
              </Button>
            </div>
          </ModernDialogContent>
        </ModernDialog>

        {/* Cancel Loan Modal */}
        <ModernDialog open={openCancelLoan} onOpenChange={setOpenCancelLoan}>
          <ModernDialogContent size="md" open={openCancelLoan} onOpenChange={setOpenCancelLoan} className="sm:max-w-md">
            <ModernDialogHeader className="text-center pb-4">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Trash2 className="w-8 h-8 text-red-600" />
              </div>
              <ModernDialogTitle className="text-2xl font-bold text-gray-900">Cancel Loan</ModernDialogTitle>
              <ModernDialogDescription className="text-gray-600">
                Are you sure you want to cancel this loan? The outstanding amount will be deducted from the account balance.
              </ModernDialogDescription>
            </ModernDialogHeader>
            
            {selectedLoan && (
              <div className="mb-6 space-y-4">
                <div className="p-4 bg-gray-50 rounded-xl border">
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-gray-600">Purpose:</span>
                      <span className="text-sm font-semibold text-gray-900">{selectedLoan.purpose}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-gray-600">Loan Amount:</span>
                      <span className="text-sm font-bold text-amber-600">{formatCurrency(selectedLoan.amount)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-gray-600">Amount Repaid:</span>
                      <span className="text-sm font-bold text-green-600">{formatCurrency(selectedLoan.amountRepaid)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-gray-600">Outstanding:</span>
                      <span className="text-sm font-bold text-red-600">{formatCurrency(selectedLoan.amount - selectedLoan.amountRepaid)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm font-medium text-gray-600">Due Date:</span>
                      <span className="text-sm text-gray-900">{format(parseISO(selectedLoan.repaymentDate), 'MMM d, yyyy')}</span>
                    </div>
                  </div>
                </div>
                
                <div className="p-4 bg-yellow-50 rounded-xl border border-yellow-200">
                  <div className="flex items-start gap-3">
                    <AlertCircle className="w-5 h-5 text-yellow-600 mt-0.5" />
                    <div className="space-y-1">
                      <p className="text-sm font-medium text-yellow-800">Balance Check</p>
                      <p className="text-xs text-yellow-700">
                        Current balance: <span className="font-semibold">{formatCurrency(account?.balance || 0)}</span>
                      </p>
                      <p className="text-xs text-yellow-700">
                        Outstanding amount: <span className="font-semibold">{formatCurrency(selectedLoan.amount - selectedLoan.amountRepaid)}</span>
                      </p>
                      {account && (account.balance < (selectedLoan.amount - selectedLoan.amountRepaid)) && (
                        <p className="text-xs text-red-600 font-medium">⚠️ Insufficient balance to cancel this loan</p>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div className="flex flex-col sm:flex-row gap-3 pt-4">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => {
                  setOpenCancelLoan(false);
                  setSelectedLoan(null);
                }} 
                className="flex-1 h-12 rounded-xl border-2"
              >
                Cancel
              </Button>
              <Button 
                onClick={async () => {
                  if (selectedLoan) {
                    try {
                      await cancelLoanMutation.mutateAsync(selectedLoan.id);
                      toast({
                        title: "Loan Cancelled",
                        description: `Successfully cancelled loan: ${selectedLoan.purpose}`,
                      });
                      setOpenCancelLoan(false);
                      setSelectedLoan(null);
                    } catch (error: any) {
                      toast({
                        variant: "destructive",
                        title: "Cancellation Failed",
                        description: error.message || 'Failed to cancel loan',
                      });
                    }
                  }
                }}
                className="flex-1 h-12 bg-gradient-to-r from-red-600 to-pink-600 hover:from-red-700 hover:to-pink-700 text-white rounded-xl transition-all duration-200 hover:scale-105"
                disabled={cancelLoanMutation.isPending || (account && selectedLoan && account.balance < (selectedLoan.amount - selectedLoan.amountRepaid))}
              >
                {cancelLoanMutation.isPending ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Cancelling...
                  </>
                ) : (
                  <>
                    <Trash2 className="w-4 h-4 mr-2" />
                    Cancel Loan
                  </>
                )}
              </Button>
            </div>
          </ModernDialogContent>
        </ModernDialog>
      </div>
    </div>
  );
}

export default function PupilBankingDetailPage() {
  const searchParams = useSearchParams();
  const pupilId = searchParams?.get('pupilId') || null;

  // It's good practice to provide a key to Suspense when its children might change based on external factors
  // like query parameters, to ensure proper remounting and state reset if needed.
  return (
    <Suspense key={pupilId} fallback={
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
        <div className="text-center space-y-4">
          <div className="relative">
            <Loader2 className="h-16 w-16 animate-spin text-blue-600 mx-auto" />
            <div className="absolute inset-0 h-16 w-16 rounded-full border-4 border-blue-200 border-t-transparent animate-spin mx-auto"></div>
          </div>
          <div className="space-y-2">
            <h3 className="text-xl font-bold text-gray-800">Loading Banking Details</h3>
            <p className="text-gray-600">Please wait while we prepare your banking dashboard...</p>
          </div>
        </div>
      </div>
    }>
      <PupilBankingDetailContent pupilId={pupilId} />
    </Suspense>
  );
} 