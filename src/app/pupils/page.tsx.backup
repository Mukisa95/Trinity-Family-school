"use client";

import { useState, useMemo } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { Plus, PencilSimple, Trash, Power, FunnelSimple, CaretUp, CaretDown, X, Printer, ChartLine, DotsThree, MagnifyingGlass } from '@phosphor-icons/react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useDeletePupil, useUpdatePupil } from '@/lib/hooks/use-pupils';
import { useProgressivePupils } from '@/lib/hooks/use-progressive-pupils';
import { useClasses } from '@/lib/hooks/use-classes';
import { useSchoolSettings } from '@/lib/hooks/use-school-settings';
import { PupilsProgressIndicator } from '@/components/pupils/PupilsProgressIndicator';
import {
  ModernDialog,
  ModernDialogContent,
  ModernDialogDescription,
  ModernDialogFooter,
  ModernDialogHeader,
  ModernDialogTitle,
} from "@/components/ui/modern-dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Shield, Loader2, Edit, Settings, ChevronDown, UserPlus, CreditCard } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { PDFViewer, PDFDownloadLink } from '@react-pdf/renderer';
import PupilsListPDFDocument, { ColumnSelection } from '@/components/pdf/PupilsListPDFDocument';
import { useState as useReactState, useEffect } from 'react';
import type { Pupil, Guardian, Class, PupilStatus } from '@/types';
import { Suspense } from 'react';
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";

// Define interfaces
interface House {
  id: string;
  name: string;
  motto?: string;
  color: string;
  createdAt: string;
  updatedAt: string;
}

interface HouseAssignment {
  id: string;
  houseId: string;
  house: House;
  pupilId: string;
  assignedAt: string;
  assignedBy?: string;
  previousHouseId?: string;
  isActive: boolean;
  notes?: string;
  createdAt: string;
  updatedAt: string;
}

type SortField = 'name' | 'age' | 'class' | 'gender' | 'status' | 'house';
type SortOrder = 'asc' | 'desc';

interface Filters {
  classId: string;
  gender: string;
  status: string;
  section: string;
  houseId: string;
  ageRange: {
    min: number;
    max: number;
  };
}



// Add settings interface
interface Settings {
  generalInfo: {
    name: string;
    logo?: string;
    motto?: string;
    establishedYear?: string;
    schoolType?: string;
    registrationNumber?: string;
  };
  contact: {
    email?: string;
    phone?: string;
    alternativePhone?: string;
    website?: string;
  };
  address: {
    physical?: string;
    postal?: string;
    city?: string;
    country?: string;
  };
  headTeacher: {
    name?: string;
    signature?: string;
    message?: string;
  };
}

// Function to get user info from token
const getUserFromToken = () => {
  // Check if we're on the client side
  if (typeof window === 'undefined') {
    return {
      id: 'system',
      firstName: 'System',
      lastName: 'Admin',
      role: 'admin'
    };
  }

  const token = localStorage.getItem('token');
  if (!token) {
    return {
      id: 'guest',
      firstName: 'Guest',
      lastName: 'User',
      role: 'user'
    };
  }

  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(window.atob(base64));
    return {
      id: payload.id,
      firstName: payload.firstName || payload.username,
      lastName: payload.lastName || '',
      role: payload.role
    };
  } catch (error) {
    console.error('Error parsing token:', error);
    return {
      id: 'error',
      firstName: 'Unknown',
      lastName: 'User',
      role: 'user'
    };
  }
};



function PupilsContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState<SortField>('name');
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');
  const [filters, setFilters] = useState<Filters>({
    classId: '',
    gender: searchParams?.get('gender') || '',
    status: 'Active',
    section: '',
    houseId: '',
    ageRange: { min: 0, max: 100 }
  });
  const [statusChangeModal, setStatusChangeModal] = useState<{
    isOpen: boolean;
    pupil: Pupil | null;
  }>({
    isOpen: false,
    pupil: null
  });
  const [selectedStatus, setSelectedStatus] = useState('');
  const [selectedClassId, setSelectedClassId] = useState('');
  const [showClassSelection, setShowClassSelection] = useState(false);
  const [selectedPupilGuardians, setSelectedPupilGuardians] = useState<{
    pupilName: string;
    guardians: Guardian[];
    emergencyContactId: string;
  } | null>(null);
  const [isPrintModalOpen, setIsPrintModalOpen] = useState(false);
  const [selectedPupilSiblings, setSelectedPupilSiblings] = useState<{
    pupilName: string;
    siblings: Pupil[];
  } | null>(null);
  
  // Add column selection state with default values
  const [columnSelection, setColumnSelection] = useState<ColumnSelection>({
    pin: true,
    name: true,
    gender: true,
    age: true,
    class: true,
    section: true,
    status: true,
    house: true,
    guardianContacts: false,
    siblings: false,
    photo: false
  });
  
  // Add state for column selection modal
  const [isColumnSelectionModalOpen, setIsColumnSelectionModalOpen] = useState(false);

  // Add class change modal state
  const [classChangeModal, setClassChangeModal] = useState<{
    isOpen: boolean;
    pupil: Pupil | null;
  }>({
    isOpen: false,
    pupil: null
  });
  const [selectedNewClassId, setSelectedNewClassId] = useState('');

  // Firebase hooks
  const progressivePupils = useProgressivePupils();
  const { data: pupils = [], isLoading: isLoadingPupils, error } = progressivePupils;
  const { data: classes = [], isLoading: isLoadingClasses } = useClasses();
  const { data: schoolSettings, isLoading: isLoadingSettings } = useSchoolSettings();
  const deletePupilMutation = useDeletePupil();
  const updatePupilMutation = useUpdatePupil();

  // Mock houses data - you can replace this with actual house fetching
  const houses: House[] = [];

  // Use actual school settings or fallback to default
  const settings: Settings = schoolSettings || {
    generalInfo: {
      name: "Trinity Family Schools",
      motto: "Excellence in Education"
    },
    contact: {},
    address: {},
    headTeacher: {}
  };

  // Get user info from token instead of API call
  const currentUser = getUserFromToken();

  const calculateAge = (dateOfBirth: string) => {
    const today = new Date();
    const birthDate = new Date(dateOfBirth);
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    return age;
  };

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortOrder('asc');
    }
  };

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) return null;
    return sortOrder === 'asc' ? <CaretUp className="inline" /> : <CaretDown className="inline" />;
  };

  // Add a function to get siblings for a pupil
  const getSiblings = (pupil: Pupil): Pupil[] => {
    if (!pupil.familyId) return [];
    return pupils.filter(p => 
      p.familyId === pupil.familyId && 
      p.id !== pupil.id && 
      (p.status === 'Active' || p.status === 'Inactive')
    );
  };

  // Helper function to get the current house of a pupil
  const getPupilHouse = (pupil: Pupil): House | null => {
    // For now, return null since we don't have house data
    // You can implement this when house data is available
    return null;
  };

  // Filter pupils for display
  const filteredAndSortedPupils = useMemo(() => {
    const filtered = pupils.filter(pupil => {
      // Status filter
      if (filters.status && pupil.status !== filters.status) return false;
      
      // Class filter
      if (filters.classId && pupil.classId !== filters.classId) return false;

      // Gender filter
      if (filters.gender && pupil.gender !== filters.gender) return false;

      // Section filter
      if (filters.section && pupil.section !== filters.section) return false;

      // Age filter
      if (pupil.dateOfBirth) {
        const age = calculateAge(pupil.dateOfBirth);
        if (age < filters.ageRange.min || age > filters.ageRange.max) return false;
      }

      // Search filter
      if (searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        const fullName = `${pupil.firstName} ${pupil.lastName} ${pupil.otherNames || ''}`.toLowerCase();
        const pin = (pupil.learnerIdentificationNumber || pupil.admissionNumber)?.toLowerCase() || '';
        if (!fullName.includes(searchLower) && !pin.includes(searchLower)) return false;
      }
      
      return true;
    });

    // Sort the filtered pupils
    filtered.sort((a, b) => {
      const multiplier = sortOrder === 'asc' ? 1 : -1;
      
      switch (sortField) {
        case 'name':
          return multiplier * (`${a.firstName} ${a.lastName}`).localeCompare(`${b.firstName} ${b.lastName}`);
        case 'age':
          if (!a.dateOfBirth || !b.dateOfBirth) return 0;
          return multiplier * (calculateAge(a.dateOfBirth) - calculateAge(b.dateOfBirth));
        case 'class':
          const classA = classes.find(c => c.id === a.classId)?.code || '';
          const classB = classes.find(c => c.id === b.classId)?.code || '';
          return multiplier * classA.localeCompare(classB);
        case 'gender':
          return multiplier * a.gender.localeCompare(b.gender);
        case 'status':
          return multiplier * a.status.localeCompare(b.status);
        case 'house':
          const houseA = getPupilHouse(a)?.name || '';
          const houseB = getPupilHouse(b)?.name || '';
          return multiplier * houseA.localeCompare(houseB);
        default:
          return 0;
      }
    });

    return filtered;
  }, [pupils, filters, sortField, sortOrder, searchTerm, classes]);

  const handleDelete = async (pupilId: string, pupilName: string) => {
    if (window.confirm(`Are you sure you want to delete ${pupilName}?`)) {
    try {
      await deletePupilMutation.mutateAsync(pupilId);
      toast({
        title: "Pupil Deleted",
          description: `${pupilName} has been deleted successfully.`,
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to delete pupil. Please try again.",
      });
      }
    }
  };

  const handleStatusChange = (pupil: Pupil) => {
    setStatusChangeModal({
      isOpen: true,
      pupil: pupil
    });
    setSelectedStatus('');
    setSelectedClassId('');
    setShowClassSelection(false);
  };

  const handleStatusSelection = (status: string) => {
    setSelectedStatus(status);
    // If changing to Active from another status, show class selection
    if (status === 'Active' && statusChangeModal.pupil?.status !== 'Active') {
      setShowClassSelection(true);
      setSelectedClassId(statusChangeModal.pupil?.classId || '');
    } else {
      setShowClassSelection(false);
    }
  };

  const getClassName = (classId: string | undefined) => {
    if (!classId) return "N/A";
    const cls = classes.find(c => c.id === classId);
    return cls ? cls.name : "N/A";
  };

  const confirmStatusChange = async () => {
    if (!statusChangeModal.pupil) return;

    const pupil = statusChangeModal.pupil;

    try {
      const updateData: any = {
        status: selectedStatus as PupilStatus,
      };
      
      // Add status history entry
      const statusHistoryEntry = {
        date: new Date().toISOString(),
        fromStatus: pupil.status || 'N/A',
        toStatus: selectedStatus as PupilStatus,
        reason: selectedStatus === 'Active' && pupil.status !== 'Active' 
          ? `Status changed from ${pupil.status} to ${selectedStatus} with class assignment`
          : `Status changed from ${pupil.status} to ${selectedStatus}`,
        processedBy: "System Admin", // TODO: Replace with actual user
      };

      // Add status history to update data
      updateData.statusChangeHistory = [...(pupil.statusChangeHistory || []), statusHistoryEntry];
      
      // If changing to Active and class selection was shown, update class too
      if (selectedStatus === 'Active' && showClassSelection && selectedClassId && selectedClassId !== pupil.classId) {
        updateData.classId = selectedClassId;
        updateData.className = getClassName(selectedClassId);
        
        // Also add promotion history entry if class changed
        const promotionHistoryEntry = {
          date: new Date().toISOString(),
          fromClassId: pupil.classId,
          fromClassName: pupil.className || getClassName(pupil.classId),
          toClassId: selectedClassId,
          toClassName: getClassName(selectedClassId),
          type: 'Transfer' as const,
          notes: `Class changed during status update to Active`,
          processedBy: "System Admin", // TODO: Replace with actual user
        };
        
        updateData.promotionHistory = [...(pupil.promotionHistory || []), promotionHistoryEntry];
      }

      await updatePupilMutation.mutateAsync({
        id: pupil.id,
        data: updateData,
      });

      toast({
        title: "Status Updated",
        description: `${pupil.firstName}'s status has been changed to ${selectedStatus}${
          updateData.classId && updateData.classId !== pupil.classId ? ` and moved to ${getClassName(selectedClassId)}` : ''
        }.`,
      });
      
      setStatusChangeModal({ isOpen: false, pupil: null });
    } catch (err) {
      console.error("Failed to update status:", err);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update status. Please try again.",
      });
    }
  };

  // Add class change handlers
  const handleClassChange = (pupil: Pupil) => {
    setClassChangeModal({ isOpen: true, pupil });
    setSelectedNewClassId(pupil.classId || '');
  };

  const confirmClassChange = async () => {
    if (!classChangeModal.pupil || !selectedNewClassId) return;

    const pupil = classChangeModal.pupil;
    
    if (selectedNewClassId === pupil.classId) {
      toast({
        variant: "destructive",
        title: "No Change",
        description: "Please select a different class.",
      });
      return;
    }

    try {
      const updateData: any = {
        classId: selectedNewClassId,
        className: getClassName(selectedNewClassId),
      };

      // Add promotion history entry
      const promotionHistoryEntry = {
        date: new Date().toISOString(),
        fromClassId: pupil.classId,
        fromClassName: pupil.className || getClassName(pupil.classId),
        toClassId: selectedNewClassId,
        toClassName: getClassName(selectedNewClassId),
        type: 'Transfer' as const,
        notes: `Class changed from pupils list`,
        processedBy: "System Admin", // TODO: Replace with actual user
      };
      
      updateData.promotionHistory = [...(pupil.promotionHistory || []), promotionHistoryEntry];

      await updatePupilMutation.mutateAsync({
        id: pupil.id,
        data: updateData,
      });

      toast({
        title: "Class Updated",
        description: `${pupil.firstName}'s class has been changed from ${getClassName(pupil.classId)} to ${getClassName(selectedNewClassId)}.`,
      });
      
      setClassChangeModal({ isOpen: false, pupil: null });
      setSelectedNewClassId('');
    } catch (err) {
      console.error("Failed to update class:", err);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update class. Please try again.",
      });
    }
  };

  const [isFiltersExpanded, setIsFiltersExpanded] = useState(false);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 p-2 sm:p-6">
      <div className="bg-white/80 border-b shadow-sm backdrop-blur-xl sticky top-0 z-10 border-b-indigo-100 -mx-2 sm:-mx-6 px-2 sm:px-6 py-2 sm:py-4 mb-4 sm:mb-6">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center gap-2 sm:gap-4">
            <h1 className="text-lg sm:text-xl font-bold text-indigo-900 whitespace-nowrap">Pupils</h1>
            <div className="flex-1 relative group">
              <div className="absolute inset-y-0 left-0 pl-2 sm:pl-3 flex items-center pointer-events-none text-blue-500/80 group-hover:text-blue-600 transition-all duration-500 z-10">
                <MagnifyingGlass size={14} className="sm:w-4 sm:h-4" weight="duotone" />
              </div>
              <input
                type="text"
                placeholder="Search pupils..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-8 sm:pl-10 pr-4 sm:pr-6 py-1.5 sm:py-2 text-sm bg-white/90 rounded-full focus:ring-2 focus:ring-blue-400/50 focus:outline-none shadow-sm hover:shadow-md transition-all duration-500 ease-in-out placeholder:text-gray-400 placeholder:text-sm"
                style={{
                  boxShadow: "0 1px 3px rgba(0,0,0,0.05), 0 0 0 1px rgba(226, 232, 240, 0.5)",
                  border: "none"
                }}
              />
            </div>
            <div className="flex items-center gap-2 flex-shrink-0">
              <button
                onClick={() => setIsColumnSelectionModalOpen(true)}
                className="p-2 sm:p-2.5 text-indigo-700 hover:text-blue-600 hover:bg-blue-50/80 rounded-full transition-all duration-200 transform hover:scale-110 active:scale-95 shadow-sm hover:shadow-md"
                style={{
                  boxShadow: "0 1px 3px rgba(0,0,0,0.05), 0 0 0 1px rgba(226, 232, 240, 0.5)",
                }}
                title="Print List"
              >
                <Printer size={16} className="sm:w-5 sm:h-5" weight="duotone" />
              </button>
              <button 
                onClick={() => router.push('/pupils/new')}
                className="p-2 sm:p-2.5 text-white bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 rounded-full transition-all duration-200 transform hover:scale-110 active:scale-95 shadow-lg hover:shadow-xl"
                title="Add New Pupil"
              >
                <Plus size={16} className="sm:w-5 sm:h-5" weight="duotone" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="mx-auto px-1 sm:px-0">
        {/* Compact Filter Panel */}
        <div className="bg-white/90 backdrop-blur-sm rounded-xl sm:rounded-2xl shadow-sm border border-blue-100/50 mb-4 sm:mb-6 overflow-hidden">
          <div className="px-2 sm:px-4 py-2 sm:py-3">
            {/* Single Row: Stats and Controls */}
            <div className="flex items-center justify-between gap-2 sm:gap-4 mb-2 sm:mb-3">
              {/* Statistics Pills */}
              <div className="flex items-center gap-1.5 sm:gap-2 flex-wrap">
                <div className="flex items-center gap-1 sm:gap-1.5 px-2 sm:px-2.5 py-0.5 sm:py-1 bg-green-50 rounded-full border border-green-100">
                  <div className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-green-500"></div>
                  <span className="text-xs text-green-700 font-medium">{pupils.filter(p => p.status === 'Active').length}</span>
                  <span className="text-xs text-green-600">Active</span>
                </div>
                <div className="flex items-center gap-1 sm:gap-1.5 px-2 sm:px-2.5 py-0.5 sm:py-1 bg-red-50 rounded-full border border-red-100">
                  <div className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-red-500"></div>
                  <span className="text-xs text-red-700 font-medium">{pupils.filter(p => p.status === 'Inactive').length}</span>
                  <span className="text-xs text-red-600">Inactive</span>
                </div>
                {Object.entries(filters).some(([key, value]) => {
                  if (key === 'ageRange') return value.min > 0 || value.max < 100;
                  return !!value;
                }) && (
                  <div className="flex items-center gap-1 sm:gap-1.5 px-2 sm:px-2.5 py-0.5 sm:py-1 bg-blue-50 rounded-full border border-blue-100">
                    <div className="h-1.5 w-1.5 sm:h-2 sm:w-2 rounded-full bg-blue-500"></div>
                    <span className="text-xs text-blue-600 font-medium">Filtered</span>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="flex items-center gap-1 sm:gap-1.5 flex-shrink-0">
                {Object.entries(filters).some(([key, value]) => {
                  if (key === 'ageRange') return value.min > 0 || value.max < 100;
                  return !!value;
                }) && (
                  <button
                    onClick={() => setFilters({
                      classId: '',
                      gender: '',
                      status: 'Active',
                      section: '',
                      houseId: '',
                      ageRange: { min: 0, max: 100 }
                    })}
                    className="inline-flex items-center gap-1 px-2 sm:px-2.5 py-1 sm:py-1.5 text-xs font-medium text-red-600 bg-red-50 hover:bg-red-100 rounded-full border border-red-100 transition-all duration-200 hover:scale-105"
                  >
                    <X size={10} className="sm:w-3 sm:h-3" />
                    <span className="hidden sm:inline">Clear</span>
                  </button>
                )}
                <button
                  onClick={() => setIsFiltersExpanded(!isFiltersExpanded)}
                  className="inline-flex items-center gap-1 sm:gap-1.5 px-2 sm:px-3 py-1 sm:py-1.5 text-xs font-medium text-blue-600 bg-blue-50 hover:bg-blue-100 rounded-full border border-blue-100 transition-all duration-200 hover:scale-105"
                >
                  <FunnelSimple size={10} className="sm:w-3 sm:h-3" weight="duotone" />
                  {isFiltersExpanded ? 'Hide' : 'Filter'}
                </button>
              </div>
            </div>

            {/* Expandable Filter Controls */}
            {isFiltersExpanded && (
              <div className="border-t border-blue-50 pt-2 sm:pt-3 animate-in slide-in-from-top-2 duration-300">
                <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-2 sm:gap-3">
                  {/* Class Filter */}
                  <div className="space-y-1">
                    <label className="block text-xs font-medium text-blue-700">Class</label>
                    <select
                      value={filters.classId}
                      onChange={(e) => setFilters(prev => ({ ...prev, classId: e.target.value }))}
                      className="w-full rounded-lg border-0 bg-blue-50/50 py-1 sm:py-1.5 px-1.5 sm:px-2.5 text-xs shadow-sm focus:ring-2 focus:ring-blue-400/50 focus:bg-white transition-all duration-200 hover:bg-white"
                    >
                      <option value="">All Classes</option>
                      {classes.map(cls => (
                        <option key={cls.id} value={cls.id}>{cls.name}</option>
                      ))}
                    </select>
                  </div>

                  {/* Section Filter */}
                  <div className="space-y-1">
                    <label className="block text-xs font-medium text-blue-700">Section</label>
                    <select
                      value={filters.section}
                      onChange={(e) => setFilters(prev => ({ ...prev, section: e.target.value }))}
                      className="w-full rounded-lg border-0 bg-blue-50/50 py-1 sm:py-1.5 px-1.5 sm:px-2.5 text-xs shadow-sm focus:ring-2 focus:ring-blue-400/50 focus:bg-white transition-all duration-200 hover:bg-white"
                    >
                      <option value="">All Sections</option>
                      <option value="Boarding">Boarding</option>
                      <option value="Day">Day</option>
                    </select>
                  </div>

                  {/* Gender Filter */}
                  <div className="space-y-1">
                    <label className="block text-xs font-medium text-blue-700">Gender</label>
                    <select
                      value={filters.gender}
                      onChange={(e) => setFilters(prev => ({ ...prev, gender: e.target.value }))}
                      className="w-full rounded-lg border-0 bg-blue-50/50 py-1 sm:py-1.5 px-1.5 sm:px-2.5 text-xs shadow-sm focus:ring-2 focus:ring-blue-400/50 focus:bg-white transition-all duration-200 hover:bg-white"
                    >
                      <option value="">All Genders</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                    </select>
                  </div>

                  {/* Status Filter */}
                  <div className="space-y-1">
                    <label className="block text-xs font-medium text-blue-700">Status</label>
                    <select
                      value={filters.status}
                      onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
                      className="w-full rounded-lg border-0 bg-blue-50/50 py-1 sm:py-1.5 px-1.5 sm:px-2.5 text-xs shadow-sm focus:ring-2 focus:ring-blue-400/50 focus:bg-white transition-all duration-200 hover:bg-white"
                    >
                      <option value="">All Status</option>
                      <option value="Active">Active</option>
                      <option value="Inactive">Inactive</option>
                      <option value="Graduated">Graduated</option>
                      <option value="Transferred">Transferred</option>
                      <option value="Suspended">Suspended</option>
                      <option value="Withdrawn">Withdrawn</option>
                    </select>
                  </div>

                  {/* Age Range Filter */}
                  <div className="space-y-1 col-span-2 sm:col-span-1">
                    <label className="block text-xs font-medium text-blue-700">Age Range</label>
                    <div className="flex items-center gap-1">
                      <input
                        type="number"
                        min="0"
                        max={filters.ageRange.max}
                        value={filters.ageRange.min}
                        onChange={(e) => setFilters(prev => ({ 
                          ...prev, 
                          ageRange: { ...prev.ageRange, min: parseInt(e.target.value) || 0 }
                        }))}
                        className="w-10 sm:w-12 rounded-lg border-0 bg-blue-50/50 py-1 sm:py-1.5 px-1 sm:px-1.5 text-xs shadow-sm focus:ring-2 focus:ring-blue-400/50 focus:bg-white transition-all duration-200 hover:bg-white text-center"
                        placeholder="0"
                      />
                      <span className="text-xs text-blue-400 font-medium">-</span>
                      <input
                        type="number"
                        min={filters.ageRange.min}
                        value={filters.ageRange.max}
                        onChange={(e) => setFilters(prev => ({ 
                          ...prev, 
                          ageRange: { ...prev.ageRange, max: parseInt(e.target.value) || 0 }
                        }))}
                        className="w-10 sm:w-12 rounded-lg border-0 bg-blue-50/50 py-1 sm:py-1.5 px-1 sm:px-1.5 text-xs shadow-sm focus:ring-2 focus:ring-blue-400/50 focus:bg-white transition-all duration-200 hover:bg-white text-center"
                        placeholder="100"
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Progressive Loading Indicator */}
        <PupilsProgressIndicator
          isProcessing={progressivePupils.isProcessing}
          currentBatch={progressivePupils.currentBatch}
          totalBatches={progressivePupils.totalBatches}
          processedCount={progressivePupils.processedCount}
          totalCount={progressivePupils.totalCount}
          progressPercentage={progressivePupils.progressPercentage}
          error={progressivePupils.error instanceof Error ? progressivePupils.error.message : progressivePupils.error}
          onRetry={progressivePupils.restart}
        />

        {isLoadingPupils || isLoadingClasses || isLoadingSettings ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
            <span className="ml-3 text-indigo-600">Loading pupils and school information...</span>
          </div>
        ) : filteredAndSortedPupils.length === 0 ? (
          <div className="bg-white rounded-xl shadow-sm border border-indigo-100 p-12 text-center">
            <p className="text-indigo-500">No pupils found</p>
        </div>
      ) : (
          <div className="bg-white rounded-xl shadow-sm border border-indigo-100 overflow-hidden">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-indigo-100">
                <thead className="bg-gradient-to-r from-indigo-50 to-white">
                  <tr>
                    <th 
                      className="px-2 sm:px-4 py-2 sm:py-3 text-left text-xs font-medium text-indigo-500 uppercase tracking-wider cursor-pointer hover:text-indigo-700 transition-colors"
                      onClick={() => handleSort('name')}
                    >
                      <span className="hidden sm:inline">Pupil Info</span>
                      <span className="sm:hidden">Pupil</span>
                      {getSortIcon('name')}
                    </th>
                    <th 
                      className="hidden sm:table-cell px-4 py-3 text-left text-xs font-medium text-indigo-500 uppercase tracking-wider cursor-pointer hover:text-indigo-700 transition-colors"
                      onClick={() => handleSort('class')}
                    >
                      Class & Section {getSortIcon('class')}
                    </th>
                    <th className="hidden md:table-cell px-4 py-3 text-left text-xs font-medium text-indigo-500 uppercase tracking-wider">
                      Family
                    </th>
                    <th className="px-2 sm:px-4 py-2 sm:py-3 text-right text-xs font-medium text-indigo-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-indigo-100">
                  {filteredAndSortedPupils.map((pupil) => {
                    const pupilHouse = getPupilHouse(pupil);
                    return (
                      <tr key={pupil.id} className={`hover:bg-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-50 transition-colors`}>
                        <td className="px-2 sm:px-4 py-2 sm:py-3">
                          <div className="flex items-center space-x-2 sm:space-x-3">
                            <div className="relative flex-shrink-0">
                              <Link 
                                href={`/pupil-detail?id=${pupil.id}`}
                                className={`block h-8 w-8 sm:h-10 sm:w-10 rounded-full bg-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-100 overflow-hidden ring-2 ring-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-100 hover:ring-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-300 transition-all flex-shrink-0`}
                              >
                    {pupil.photo ? (
                                  <img 
                        src={pupil.photo} 
                        alt={`${pupil.firstName} ${pupil.lastName}`} 
                                    className="h-full w-full object-cover"
                      />
                    ) : (
                                  <div className={`h-full w-full flex items-center justify-center text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-500 text-xs sm:text-sm font-medium`}>
                                    {pupil.firstName[0]}
                                    {pupil.lastName[0]}
                      </div>
                    )}
                    </Link>
                            </div>
                            <div className="min-w-0 flex-1">
                              <Link 
                                href={`/pupil-detail?id=${pupil.id}`}
                                className={`text-xs sm:text-sm font-medium text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-600 hover:text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-800 transition-colors block truncate`}
                              >
                                {pupil.firstName} {pupil.lastName}
                                {pupil.otherNames && ` ${pupil.otherNames}`}
                              </Link>
                              <div className="flex flex-col sm:flex-row sm:items-center gap-1 sm:gap-2 text-xs text-gray-500">
                                <span className="truncate">{pupil.learnerIdentificationNumber || pupil.admissionNumber}</span>
                                <span className="hidden sm:inline">•</span>
                                <div className="flex items-center gap-2">
                                <span>{pupil.gender}</span>
                                  <span className={`inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium ${
                                    pupil.status === 'Active' 
                                      ? 'bg-green-100 text-green-800' 
                                      : 'bg-red-100 text-red-800'
                                  }`}>
                                    {pupil.status}
                                  </span>
                                </div>
                                {pupil.dateOfBirth && (
                                  <>
                                    <span className="hidden sm:inline">•</span>
                                    <span>{calculateAge(pupil.dateOfBirth)} years</span>
                                  </>
                                )}
                              </div>
                              {/* Mobile-only class info */}
                              <div className="sm:hidden mt-1">
                                <div className="flex items-center gap-2">
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <button className={`text-xs text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-900 hover:text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-600 hover:underline transition-colors font-medium text-left`}>
                                        {classes.find(c => c.id === pupil.classId)?.name || 'N/A'} • {pupil.section}
                                      </button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="start" className="w-48">
                                      <DropdownMenuLabel className="text-xs font-medium text-muted-foreground">Class Options</DropdownMenuLabel>
                                      <DropdownMenuSeparator />
                                      <DropdownMenuItem onClick={() => {
                                        router.push(`/class-detail?id=${pupil.classId}`);
                                      }}>
                                        <Settings className="mr-2 h-4 w-4 text-blue-600" />
                                        View Class Details
                                      </DropdownMenuItem>
                                      <DropdownMenuItem onClick={() => handleClassChange(pupil)}>
                                        <Edit className="mr-2 h-4 w-4 text-orange-600" />
                                        Change Class
                                      </DropdownMenuItem>
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                  <span className="text-xs text-gray-400">•</span>
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <button className={`text-xs text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-900 hover:text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-600 hover:underline transition-colors font-medium text-left`}>
                                        Family
                                      </button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="start" className="w-48">
                                      <DropdownMenuLabel className="text-xs font-medium text-muted-foreground">Family Information</DropdownMenuLabel>
                                      <DropdownMenuSeparator />
                                      <DropdownMenuItem onClick={() => setSelectedPupilGuardians({
                                        pupilName: `${pupil.firstName} ${pupil.lastName}`,
                                        guardians: pupil.guardians || [],
                                        emergencyContactId: pupil.emergencyContactGuardianId || ''
                                      })}>
                                        <svg className="mr-2 h-4 w-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                        Guardians ({pupil.guardians?.length || 0})
                                      </DropdownMenuItem>
                                      <DropdownMenuItem onClick={() => {
                                        const siblings = getSiblings(pupil);
                                        setSelectedPupilSiblings({
                                          pupilName: `${pupil.firstName} ${pupil.lastName}`,
                                          siblings
                                        });
                                      }}>
                                        <svg className="mr-2 h-4 w-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                        </svg>
                                        Siblings ({getSiblings(pupil).length})
                                      </DropdownMenuItem>
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                </div>
                              </div>
                            </div>
                          </div>
                        </td>
                        <td className="hidden sm:table-cell px-4 py-3">
                          <div className="text-sm">
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild>
                                <button className={`text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-900 hover:text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-600 hover:underline transition-colors font-medium text-left`}>
                              {classes.find(c => c.id === pupil.classId)?.name || 'N/A'}
                                </button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="start" className="w-48">
                                <DropdownMenuLabel className="text-xs font-medium text-muted-foreground">Class Options</DropdownMenuLabel>
                                <DropdownMenuSeparator />
                                <DropdownMenuItem onClick={() => {
                                  router.push(`/class-detail?id=${pupil.classId}`);
                                }}>
                                  <Settings className="mr-2 h-4 w-4 text-blue-600" />
                                  View Class Details
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => handleClassChange(pupil)}>
                                  <Edit className="mr-2 h-4 w-4 text-orange-600" />
                                  Change Class
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                            <div className="text-xs text-gray-500 mt-0.5 capitalize">
                              {pupil.section} Scholar
                            </div>
                          </div>
                        </td>
                        <td className="hidden md:table-cell px-4 py-3">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <button className={`text-left text-sm hover:text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-600 transition-colors font-medium`}>
                            {(() => {
                                  const guardianCount = pupil.guardians?.length || 0;
                                  const siblings = getSiblings(pupil);
                                  const siblingCount = siblings.length;
                                  
                                  if (guardianCount === 0 && siblingCount === 0) {
                                    return <span className="text-gray-500">No family info</span>;
                                  }
                                  
                                  return (
                    <div className="flex flex-col">
                                      <span className="font-medium text-indigo-900">Family</span>
                                  <span className="text-xs text-gray-500">
                                        {guardianCount} guardian{guardianCount !== 1 ? 's' : ''} • {siblingCount} sibling{siblingCount !== 1 ? 's' : ''}
                                  </span>
                    </div>
                              );
                            })()}
                          </button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="start" className="w-48">
                              <DropdownMenuLabel className="text-xs font-medium text-muted-foreground">Family Information</DropdownMenuLabel>
                              <DropdownMenuSeparator />
                              <DropdownMenuItem onClick={() => setSelectedPupilGuardians({
                                pupilName: `${pupil.firstName} ${pupil.lastName}`,
                                guardians: pupil.guardians || [],
                                emergencyContactId: pupil.emergencyContactGuardianId || ''
                              })}>
                                <svg className="mr-2 h-4 w-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                </svg>
                                View Guardians ({pupil.guardians?.length || 0})
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => {
                              const siblings = getSiblings(pupil);
                              setSelectedPupilSiblings({
                                pupilName: `${pupil.firstName} ${pupil.lastName}`,
                                siblings
                              });
                              }}>
                                <svg className="mr-2 h-4 w-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                </svg>
                                View Siblings ({getSiblings(pupil).length})
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </td>
                        <td className="px-2 sm:px-4 py-2 sm:py-3 text-right text-xs font-medium text-indigo-500 uppercase tracking-wider">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                              <button className={`text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-900 hover:text-${pupil.gender === 'Female' ? 'pink' : 'indigo'}-600 transition-colors font-medium`}>
                                Actions
                              </button>
                      </DropdownMenuTrigger>
                            <DropdownMenuContent align="end" className="w-48">
                              <DropdownMenuItem onClick={() => handleStatusChange(pupil)}>
                                <Edit className="mr-2 h-4 w-4 text-blue-600" />
                                Change Status
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleClassChange(pupil)}>
                                <Edit className="mr-2 h-4 w-4 text-orange-600" />
                                Change Class
                              </DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleDelete(pupil.id, `${pupil.firstName} ${pupil.lastName}`)}>
                                <Trash className="mr-2 h-4 w-4 text-red-600" />
                                Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
          )}
        </div>
    </div>

    {/* Guardian Information Modal */}
    <ModernDialog 
      open={selectedPupilGuardians !== null} 
      onOpenChange={() => setSelectedPupilGuardians(null)}
    >
      <ModernDialogContent size="lg">
        <ModernDialogHeader>
          <ModernDialogTitle className="flex items-center">
            <svg className="mr-2 h-5 w-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            Guardian Information - {selectedPupilGuardians?.pupilName}
          </ModernDialogTitle>
          <ModernDialogDescription>
            View guardian details and emergency contact information for this pupil.
          </ModernDialogDescription>
        </ModernDialogHeader>
        
        <div className="space-y-4">
          {selectedPupilGuardians?.guardians && selectedPupilGuardians.guardians.length > 0 ? (
            selectedPupilGuardians.guardians.map((guardian, index) => (
              <div key={index} className="border rounded-lg p-4 space-y-2">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold text-lg">{guardian.firstName} {guardian.lastName}</h4>
                  {guardian.id === selectedPupilGuardians?.emergencyContactId && (
                    <span className="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                      Emergency Contact
                    </span>
                  )}
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-600">Relationship:</span>
                    <span className="ml-2">{guardian.relationship}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Phone:</span>
                    <span className="ml-2">{guardian.phone}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Email:</span>
                    <span className="ml-2">{guardian.email || 'Not provided'}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Occupation:</span>
                    <span className="ml-2">{guardian.occupation || 'Not provided'}</span>
                  </div>
                  {guardian.address && (
                    <div className="md:col-span-2">
                      <span className="font-medium text-gray-600">Address:</span>
                      <span className="ml-2">{guardian.address}</span>
                    </div>
                  )}
                </div>
              </div>
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              No guardian information available for this pupil.
            </div>
          )}
        </div>
        
        <ModernDialogFooter>
          <Button variant="outline" onClick={() => setSelectedPupilGuardians(null)}>
            Close
          </Button>
        </ModernDialogFooter>
      </ModernDialogContent>
    </ModernDialog>

    {/* Siblings Information Modal */}
    <ModernDialog 
      open={selectedPupilSiblings !== null} 
      onOpenChange={() => setSelectedPupilSiblings(null)}
    >
      <ModernDialogContent size="lg">
        <ModernDialogHeader>
          <ModernDialogTitle className="flex items-center">
            <svg className="mr-2 h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
            Siblings - {selectedPupilSiblings?.pupilName}
          </ModernDialogTitle>
          <ModernDialogDescription>
            View sibling information for this pupil.
          </ModernDialogDescription>
        </ModernDialogHeader>
        
        <div className="space-y-4">
          {selectedPupilSiblings?.siblings && selectedPupilSiblings.siblings.length > 0 ? (
            selectedPupilSiblings.siblings.map((sibling, index) => (
              <div key={index} className="border rounded-lg p-4 space-y-2">
                <div className="flex items-center space-x-3">
                  <Avatar className="w-10 h-10">
                    {sibling.photo && (
                      <AvatarImage src={sibling.photo} alt={`${sibling.firstName} ${sibling.lastName}`} />
                    )}
                    <AvatarFallback className="bg-gradient-to-br from-blue-500 to-indigo-600 text-white font-bold">
                      {sibling.firstName.charAt(0)}{sibling.lastName.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <h4 className="font-semibold">{sibling.firstName} {sibling.lastName}</h4>
                    <p className="text-sm text-gray-600">{sibling.admissionNumber}</p>
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-600">Class:</span>
                    <span className="ml-2">{classes.find(c => c.id === sibling.classId)?.name || 'N/A'}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Section:</span>
                    <span className="ml-2 capitalize">{sibling.section}</span>
                  </div>
                  <div>
                    <span className="font-medium text-gray-600">Status:</span>
                    <span className={`ml-2 inline-flex px-2 py-1 text-xs font-medium rounded-full ${
                      sibling.status === 'Active' 
                        ? 'bg-green-100 text-green-800' 
                        : sibling.status === 'Inactive'
                        ? 'bg-red-100 text-red-800'
                        : sibling.status === 'Graduated'
                        ? 'bg-blue-100 text-blue-800'
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {sibling.status || 'Unknown'}
                    </span>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              No siblings found for this pupil.
            </div>
          )}
        </div>
        
        <ModernDialogFooter>
          <Button variant="outline" onClick={() => setSelectedPupilSiblings(null)}>
            Close
          </Button>
        </ModernDialogFooter>
      </ModernDialogContent>
    </ModernDialog>
    </div>
  );
}

export default function PupilsPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 p-6">
        <div className="bg-white/80 border-b shadow-sm backdrop-blur-xl sticky top-0 z-10 border-b-indigo-100 -mx-6 px-6 py-4 mb-6">
          <div className="max-w-7xl mx-auto">
            <h1 className="text-xl font-bold text-indigo-900">Loading Pupils...</h1>
          </div>
        </div>
        <div className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
          <span className="ml-2">Loading pupils...</span>
        </div>
      </div>
    }>
      <PupilsContent />
    </Suspense>
  );
}
